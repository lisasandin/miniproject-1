import numpy as np
import matplotlib.pyplot as plt


# reaction rates
alpha_a = 50
alphaprim_a = 500
alpha_r = 0.01
alphaprim_r = 50

beta_a = 50
beta_r = 5

gamma_a = 1
gamma_r = 1
gamma_c = 2

theta_a = 50
theta_r = 100

sigma_ma = 10
sigma_mr = 0.5
sigma_a = 1
sigma_r = 0.2

# initial conditions
da = 1
dr = 1
da_prim = 0
dr_prim = 0
ma = 0
mr = 0
A = 0
R = 0
C = 0


def RandExp(lam,N):
    U =  np.random.rand(N)
    X = -1/lam*np.log(1-U)
    return X

def RandDisct(x,p,N):
    cdf = np.cumsum(p)
    U = np.random.rand(N)
    idx = np.searchsorted(cdf, U)
    return x[idx]

def SSA(Initial, StateChangeMat, FinalTime):
   # Inputs:
   #  Initial: initial conditins of size (StateNo x 1)
   #  StateChangeMat: State-change matrix of size (ReactNo, StateNo)
   #  FinalTime: the maximum time we want the process be run

    [m,n] = StateChangeMat.shape
    ReactNum = np.array(range(m))
    AllTimes = {}   # define a dictionary for storing all time levels
    AllStates = {}  # define a dictionary for storing all states at all time levels
    AllStates[0] = Initial
    AllTimes[0] = [0]
    k = 0; t = 0; State = Initial
    while True:
        w = PropensityFunc(State, m)     # propensities
        a = np.sum(w)
        tau = RandExp(a,1)               # WHEN the next reaction happens
        t = t + tau                      # update time
        if t > FinalTime:
            break
        which = RandDisct(ReactNum,w/a,1)             # WHICH reaction occurs
        State = State + StateChangeMat[which.item(),] # Uppdate the state
        k += 1
        AllTimes[k] = t
        AllStates[k] = State
    return AllTimes, AllStates


Initial = [da, dr, da_prim, dr_prim, ma, mr, A, R, C]
FinalTime = 400
StateChangeMat = np.array([   #da, dr, da_prim, dr_prim, ma, mr, A, R, C
                          [0, 0, 0, 0, 0, 0, -1, -1, 1], 
                          [0, 0, 0, 0, 0, 0, -1, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 1, -1],
                          [0, 0, 0, 0, 0, 0, 0, -1, 0],
                          [-1, 0, 1, 0, 0, 0, -1, 0, 0],
                          [0, -1, 0, 1, 0, 0, 1, 0, 0],
                          [1, 0, -1, 0, 0, 0, 1, 0, 0],
                          [0, 0, 0, 0, 1, 0, 0, 0, 0],
                          [0, 0, 0, 0, 1, 0, 0, 0, 0],
                          [0, 0, 0, 0, -1, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 1, 0, 0],
                          [0, 1, 0, -1, 0, 0, 1, 0, 0],
                          [0, 0, 0, 0, 0, 1, 0, 0, 0],
                          [0, 0, 0, 0, 0, 1, 0, 0, 0],
                          [0, 0, 0, 0, 0, -1, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0, 0, 1, 0]
                          ])



def PropensityFunc(State, ReactNo):
    # State: state variable [da, dr, da_prim, dr_prim, ma, mr, A, R, C]
    # ReactNo: number of reactions
    w = np.zeros(ReactNo)
    da, dr, da_prim, dr_prim, ma, mr, A, R, C = State
    w[0] = gamma_c*A*R
    w[1] = sigma_a*A
    w[2] = sigma_a*C
    w[3] = sigma_r*R
    w[4] = gamma_a*da*A
    w[5] = gamma_r*dr*A
    w[6] = theta_a*da_prim
    w[7] = alpha_a*da
    w[8] = alphaprim_a*da_prim
    w[9] = sigma_ma*ma
    w[10] = beta_a*ma
    w[11] = theta_r*dr_prim
    w[12] = alpha_r*dr
    w[13] = alphaprim_r*dr_prim
    w[14] = sigma_mr*mr 
    w[15] = beta_r*mr
    return w



# SSA Simulation of predator-prey model 

Times, States = SSA(Initial, StateChangeMat, FinalTime)

# retrieve state variables A and R from the output list

Times = list(Times.values())
A = [state[6] for state in States.values()]
R = [state[7] for state in States.values()]

# Create side-by-side subplots
fig, axs = plt.subplots(2, 1, figsize=(8, 6))  # 1 row, 2 columns

# Plot A
axs[0].plot(Times, A, color='blue')
axs[0].set_title('Molecule A')
axs[0].set_xlabel('Time')
axs[0].set_ylabel('Number of molecules')

# Plot R
axs[1].plot(Times, R, color='red')
axs[1].set_title('Molecule R')
axs[1].set_xlabel('Time')
axs[1].set_ylabel('Number of molecules')

plt.suptitle('Stochastic solutions using SSA')
plt.tight_layout()  
plt.show()

